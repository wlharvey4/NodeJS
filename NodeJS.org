# -*- mode:org; -*-
#+title:Node.js and Chrome Dev Tools
#+subtitle:JavaScript on the Server and in the Browser --- {{{version}}} ({{{date}}})
#+date:2019-11-11 22:14
#+author:Pinecone062
#+macro: version Version 0.0.6

#+begin_src emacs-lisp :results silent :exports results
(org-babel-tangle-file "NodeJS.org")
#+end_src

* Introduction to Node.js
:PROPERTIES:
:unnumbered: t
:END:

- https://github.com/nodejs


[[file:resources/nodejs-new-pantone-black-25.png]]

#+cindex:V8 engine
“Node.js is a JavaScript runtime built on Chrome's V8 JavaScript
engine.”

“Learn how to write fast, highly scalable network applications on a
JavaScript-based platform.”

{{{heading(Event-Driven Asynchronous I/O Model Designed for Scalable
Network Applications)}}}

As an asynchronous event-driven JavaScript runtime, Node.js is
designed to build scalable network applications.  Users of Node.js are
free from worries of dead-locking the process, since there are no
locks. Almost no function in Node.js directly performs I/O, so the
process never blocks. Because nothing blocks, scalable systems are
very reasonable to develop in Node.js.

#+cindex:event model
#+cindex:event loop
Node.js takes the event model a bit further.  It presents an event
loop as a runtime construct instead of as a library.  In other
systems, there is always a blocking call to start the event-loop.  In
Node.js, there is no such start-the-event-loop call.  Node.js simply
enters the event loop after executing the input script.  Node.js exits
the event loop when there are no more callbacks to perform.

HTTP is a first-class citizen in Node.js, designed with streaming and
low latency in mind. This makes Node.js well suited for the foundation
of a web library or framework.

** The Node Environment
Node is primarily used in server applications, but Node can be
installed on almost any machine and used for any purpose.

*** Install Node.js
- [[https://nodejs.org/en/download/][Downloads page]]

*** Say Hello in Node
Take a look at the “Hello, World” application included in the Node
documentation.  To re-create the application, create a text document
with the following JavaScript and save it as ~hello.js~.

#+caption:Node’s Hello World
#+name:node-hello-world
#+header: :mkdirp yes
#+begin_src js -n :tangle src/hello.js
  var http = require('http');
  http.createServer(function (request, response) {
      response.writeHead(200, {'Content-Type': 'text/plain'});
      response.end('Hello World\n');
  }).listen(8124);

  console.log('Server running at http://127.0.0.1:8124/');
#+end_src

To run the application, open a terminal and change to the directory
where your saved file is located and type ~node hello.js~ to run the
application.  The result is printed out to the command line, via the
~console.log()~ function call in the application.

- start server process: [[shell:node src/hello.js&]]
- open web browser:     [[http://localhost:8124]]
- kill server process:  [[shell:pkill node]]


Here, JavaScript creates a web server that displays a web page with
the words “Hello World” when accessed via a browser.  It demonstrates
several key components of a Node application.

First, it includes the module necessary to run a simple HTTP server:
the appropriately named =HTTP= module.

: var http = require('http');

External functionality for Node is incorporated via modules that
export specific types of functionality that can then be used in an
application (or another module).  They’re very similar to the
libraries you’ve used in other languages.

The module is imported using the Node ~require~ statement, and the
result assigned to a local variable.  Once imported, the local
variable can be used to instantiate the web server, via the
~http.createServer()~ function.  In the function parameters, we see
one of the fundamental constructs of Node: the callback ([[Example 1-1]]).
It’s the anonymous function that’s passing the web request and
response into the code to process the web request and provide a
response.

#+caption:Example of a callback function
#+name:Example 1-1
#+begin_src js -n
  http.createServer(function (request, response) {
      response.writeHead(200, {'Content-Type': 'text/plain'});
      response.end('Hello World\n');
  }).listen(8124);
#+end_src

#+cindex:event loop
#+cindex:single-thread
#+cindex:asynchronous environment
#+cindex:callback function
JavaScript is single-threaded, and the way Node emulates an
asynchronous environment in a single-threaded environment is via an
event loop, with associated callback functions that are called once a
specific event has been triggered.  In [[Example 1-1]], when a web request
is received, the callback function is called.

The ~console.log()~ message is output to the terminal as soon as the
call to create the server is made.  The program doesn’t stop and
block, waiting for a web request to be made.

: console.log('Server running at http://127.0.0.1:8124/');

Once the server is created and has received a request, the callback
function writes a plain text header with server status of 200 back to
the browser, writes out the Hello World message, and then ends the
response.

**** Hello World Tweaked
The tweaked code is in [[Example 1-2]].  In it, the application code is
modified to parse the incoming request to look for a query string.
The name in the string is extracted and used to determine the type of
content returned.  Almost any name will return a personalized
response, but if you use ~name=burningbird~ as the query, you’ll get
an image.  If no query string is used, or no name passed, the name
variable is set to =world=.

#+caption:Example 1-2
#+name:Example 1-2
#+begin_src js -n :tangle src/hello-tweaked.js
  var http = require('http');
  var fs = require('fs');

  http.createServer(function (req, res) {
     var name = require('url').parse(req.url, true).query.name;

     if (name === undefined) name = 'world';

     if (name == 'burningbird') {
        var file = './resources/phoenix5a.png';
        fs.stat(file, function (err, stat) {
           if (err) {
              console.error(err);
              res.writeHead(200, {'Content-Type': 'text/plain'});
              res.end("Sorry, Burningbird isn't around right now \n");
           } else {
              var img = fs.readFileSync(file);
              res.contentType = 'image/png';
              res.contentLength = stat.size;
              res.end(img, 'binary');
           }
        });
     } else {
        res.writeHead(200, {'Content-Type': 'text/plain'});
        res.end('Hello ' + name + '\n');
     }
  }).listen(8124);

  console.log('Server running at port 8124/');
#+end_src

- Start tweaked hello server     [[shell:node src/hello-tweaked.js&]]
- Open tweaked hello in browser: [[http:localhost:8124/?name=burningbird]]
- Kill tweaked hello server      [[shell:pkill -f node]]


Not much extra code, but there are several differences between the
basic Hello World application and the tweaked version.  From the top,
a new module is included in the application, named ~fs~.  This is the
File System module.

There’s also another module imported, but not in the same way as the
other two:

: var name = require('url').parse(req.url, true).query.name;

Exported module properties can be chained, so we can both import the
module and use its functions in the same line.  This frequently
happens with the URL module, whose only purpose is to provide a URL
utility.

*** Node Hosting Environments
When you’re ready to start providing greater access to your
applications, you’ll either need to find an environment where you can
run a Node application, such as:
- a virtual private network (VPN) or
- a host that specifically provides for Node application support

**** Hosting Node on a Server---VPS---Managed Host
#+cindex:VPS
#+cindex:host Node application
Hosting Node on a virtual private server (VPS) is a simple matter.

- https://www.linode.com


You do have root access for your VPS and can pretty much do whatever
you want.  The issue, though, with a VPS is the same issue you’d have
if you hosted your own server: you have to maintain the server.  This
includes setting up an email system and an alternative web server,
most likely Apache or Nginx, to handle firewalls and other security,
email, etc.  It’s not trivial.

If you’re comfortable with managing all aspects of a Internet-faced
environment, a VPS can be an affordable option for hosting a Node
application.  At least until you’re ready to push it into production,
in which case you may want to look at hosting the application in the
cloud.

**** Cloud Hosting
#+cindex:cloud
Node applications are well-suited to cloud-based implementations.
When you host a Node application in the cloud, what you’re really
doing, typically, is creating the application on your own server or
PC, testing it, making sure it’s what you want, and then pushing the
application out to the cloud server.  A cloud server for Node allows
you to create the Node application you want to create, using the
resources of whatever database system or other system you wish, but
without having to manage the server directly.  You can focus
specifically on the Node application without having to worry about FTP
or email servers, or general server maintenance.

*** Node LTS and Upgrading
One result of the merge is a strict timeline of Node releases, based
on semantic versioning (Semver).  Semver releases features as three
groups of numbers, each with a specific meaning.  I.e., Version 4.3.2:
- The major release is 4 :: This number will only increase when a
     major, backward- incompatible change is made to Node.
- The minor release is 3 :: This number increases when new
     functionality is added, but the functionality is still backward
     compatible.
- The patch release is 2 :: This number changes when security or other
     bug fixes require a new release of the application. It is also
     backward compatible.

*** Node V8 ES6
Behind Node is a JavaScript engine.  For most implementations, the
engine is V8.  Originally created by Google for Chrome, the V8 source
code was open-sourced in 2008.  The V8 JavaScript engine was created
to improve the speed of JavaScript by incorporating a just-in-time
(JIT) compiler that compiles JavaScript to machine code rather than
interpreting it, which had been the norm for JavaScript for years.
The V8 engine is written in C++.

**** ES 2015
When Node v4.0 released, it did so with support for V8 4.5, the same
version of the engine being used by Chrome.  The Node maintainers are
also committed to supporting upcoming versions of V8 as they’re
released.  This means that Node now incorporates support for many of
the new ECMA-262 (ECMAScript 2015 or ES6) features.  Node v6 supports
V8 version 5.0, and new releases of Node will support newer versions
of V8 accordingly.

**** Harmony
In prior versions of Node, to access the new ES6 features, you would
have to use the harmony flag ({{{option(--harmony)}}}) when running the
application:

: node --harmony app.js

Now, ES6 feature support is based on the following criteria (directly
from the Node.js documentation):

- shipping features :: are turned on by default on Node.js and do not
     require any kind of runtime flag.

- staged features :: require a runtime flag:
     {{{option(--es_staging)}}} (or its synonym,
     {{{option(--harmony)}}).

- in-progress features :: can be activated individually by their
     respective harmony flag (e.g.,
     {{{option(--harmony_destructuring)}}}).


the following are some of the ES6 features supported in Node:

- classes
- promises
- symbols
- arrow functions
- generators
- collections
- let
- spread operator

*** Node C/C++
Though the language used to create Node applications is based in
JavaScript, much of Node is actually written in C++.  You can choose
to extend Node functionality using C/C++ to create an add-on.  Writing
a Node add-on is not the same as writing a more traditional C/C++
application.  For one, there are libraries, such as the V8 library,
that you’ll typically access.  For another, the Node add-on is not
compiled using the tools you would normally use.  Once you’ve written
the code, you’ll need to use a tool, ~node-gyp~, to actually compile
the add-on into a ~.node~ file.

* Global Objects

* Events

* Asynchronous Model

* Model System and Package Manager

* REPL and Console

* HTTP Module and Servers

* Local System

* Networking---Sockets---Security

* Child Processes

* ECMAScript 6

* Full Stack Development

* Development and Production Environments

* Debugging Guide
- https://nodejs.org/en/docs/guides/debugging-getting-started/

** Inspector
#+cindex:debugging client
#+cindex:@option{--inspect} option
- {{{option(--inspect)}}} :: When started with the
     {{{option(--inspect)}}} switch, a Node.js process listens for a
     debugging client.  By default, it will listen at host and port
     =127.0.0.1:9229=.  Each process is also assigned a unique UUID.

     #+cindex:Inspector client
     #+cindex:UUID
- Inspector client :: Inspector clients must know and specify host
     address, port, and UUID[fn:1] to connect. A full URL will look
     something like:
     : ws://127.0.0.1:9229/0f2c936f-b1cd-4ac9-aab3-f63b0f33d55e

     #+cindex:@code{SIGUSR1} client
- =SIGUSR1= signal :: Node.js will also start listening for debugging
     messages if it receives a =SIGUSR1= signal.  In Node.js 8 and
     later, it will activate the Inspector API.

** Inspector Clients
Several commercial and open source tools can connect to Node's
Inspector.  Basic info on these follows:

*** node-inspect

*** Chrome DevTools 55+

*** Visual Studio Code 1.10+

*** Visual Studio 2017

*** JetBrains WebStorm 2017.1+ and other JetBrains IDEs

*** chrome-remote-interface

*** Gitpod

*** Eclipse IDE with Eclipse Wild Web Developer extension

** Command-Line Options
- --inspect ::

  - Enable inspector agent

  - Listen on default address and port (127.0.0.1:9229)

- --inspect=[host:port] ::

  - Enable inspector agent

  - Bind to address or hostname host (default: 127.0.0.1)


  - Listen on port port (default: 9229)

- --inspect-brk ::

- --inspect-brk[host:port] ::

- node inspect <script.js> ::

- node inspect -- port=xxx <script.js> :: 

* Resources
:PROPERTIES:
:appendix: t
:END:

** Node.js Source
- https://github.com/nodejs/node


“Node.js is a JavaScript runtime built on Chrome's V8 JavaScript
engine.”

** Code Resources
Supplemental material (code examples, exercises, etc.) is available
for download at:

- https://github.com/shelleyp/LearningNode2g

* Node.js Version X
:PROPERTIES:
:appendix: t
:END:

** Node.js v10
- https://blog.risingstack.com/node-js-10-lts-feature-breakdown/


{{{heading(New Features List)}}}

- Stable HTTP/2 in Node 10.

  With Node v10 the ~http2~ module has become a stable addition to the
  Node core.  You can use it on its own:
  - [[https://blog.risingstack.com/node-js-http-2-push/][HTTP/2 Server Push with Node.js]]

- ECMAScript Modules---ESM

  The problem is that the two module systems are not compatible so the
  Modules Team had to find a proper solution so JavaScript modules
  could be built in a platform agnostic way and could be used both in
  Node and in browsers.  Node.js v10 does not bring the full
  implementation of ESMs, but we will definitely see rapid iterations
  regarding the topic.

  See also [[https://exploringjs.com/impatient-js/ch_modules.html][Modules]]

- Error Codes

  In Node.js v10 all errors thrown by the Node.js APIs have an error
  code as well, meaning you don’t need to match the error message that
  should be readable for humans to begin with.

- Experimental fs Promises

  Node.js v8 introduced ~util.promisify~ to easily wrap functions that
  provide a callback API.  In the latest release functions of the ~fs~
  return promises directly, eliminating the extra step and overhead of
  the old way.

- N-API

  The N-API provides an abstraction layer over the V8 / NAN APIs so
  changes in those can be handled in a higher level layer, resulting
  in a more stable surface that native addon developers can use.  So
  far it was an experimental feature, but it has been promoted to
  stable in Node v10.

- V8 6.6

  Node.js is shipped with the V8 v6.6 that brings async generators and
  array performance improvements.  ~Array.reduce~ has become 10 times
  faster for holey double arrays.  The performance of async generators
  and async iteration has also been increased by a great margin.

  The new release provides new JavaScript language features as
  well. The full list can be found [[https://v8.dev][here]].

** Node.js v12
*** New Features You Shouldn’t Miss
- https://blog.risingstack.com/node-js-12-new-features/

- V8 updated to version 7.4

  - Async stack traces arrived

  - Faster async/await implementation

  - New JavaScript language features

  - Performance tweaks & improvements

  - Progress on Worker threads, N-API

- Default HTTP parser switched to llhttp

- New experimental “Diagnostic Reports” feature


{{{heading(assert module adjustments in Node 12)}}}

Starting from v12.0.0 the assertion methods validate the required
arguments.  Instead of returning a misleading =ERR_ASSERTION= error,
the methods indicate if there are arguments missing with the
=ERR_MISSING_ARGS= error code.

{{{heading(TLS 1.3 is now default in Node.js 12)}}}

[[https://www.ssl.com/blogs/need-know-tls-1-3/][TLS 1.3]] is now the default max protocol supported by Node.js.

After 8 years, TLS has been updated and it offers enhanced security
and performance.  Support for RSA has been removed because of its
history of bugs and it also did not support forward secrecy.  The
protocol also got safer cipher options and modes while halved the
number of handshake roundtrips contrary to its 1.2 predecessor which
required two roundtrips.

{{{heading(JavaScript Language Features)}}}

{{{subheading(Async Stack Traces)}}}

So far, developers faced the problem of V8 truncating the stack trace
up to the most recent await.  Thanks to a recent update to the engine,
Node.js now tracks the asynchronous call frames in the ~error.stack~
property.

#+begin_src js -n
async function wait_1(x) {
 await wait_2(x)
}

async function wait_2(x) {
 await wait_3(x);
}

async function wait_3(x) {
 await x;

 throw new Error("Oh boi")
}

wait_1(1).catch(e => console.log(e.stack));
#+end_src

This code example prints the following outputs before and after async
stack traces got into Node.js.

#+caption:Under Node.js v11.14.0
#+name:under-node.js-v11.14.0
[[file:resources/03-async-error-Nodejs-v11.14.png]]

#+caption:Under Node.js v12.0.0
#+name:under-node.js-v12.0.0
[[file:resources/04-async-error-Nodejs-v12.png]]

{{{subheading(Public Class Fields)}}}

Instead of listing all variables with default values in the
constructor, you can define them on the class level.

#+caption:Public Class Fields under v10
#+name:public-class-fields-under-v10
#+begin_src js -n
class Vehicle {
 constructor(type) {
   this.type = type;
   this.speed = 80;
 }
}
#+end_src

Thus, you can omit the constructor if no parameter is needed or just
focus on the required variables on initialization.

#+caption:Public Class Fields under v12
#+name:public-class-fields-under-v12
#+begin_src js -n
class Vehicle2 {
 speed = 80;

 constructor(type) {
   this.type = type;
 }
}
#+end_src

{{{subheading(Private Class Fields)}}}

JavaScript brought in the concept of private class fields which
finally landed in Node.js v12.  To mark fields private just give them
a name starting with =#=.  If You try to access a private field
outside of the class it throws a =SyntaxError= error.

#+caption:Private Class Fields in v12
#+name:private-class-fields-in-v12
#+begin_src js -n
class Counter {
 #count = 0

 increment() {
   this.#count++;
 }

 get value() {
   return this.#count;
 }
}

const counter = new Counter()
counter.increment()
counter.value // 1

counter.#value // SyntaxError
#+end_src

{{{heading(llhttp parser in Node.js 12)}}}

llhttp is a port of http_parser that improves on maintainability and
benchmark results. The library claims to be faster by 116%.

{{{heading(Diagnostic Reports)}}}

- [[https://github.com/nodejs/node-report][node-report]]

This utility tool is known as ~node-report~ that was recently brought
into the Node.js core.  It helps to detect abnormal terminations,
memory leaks, high CPU usage, unexpected errors and more.

Run the ~node --experimental-report --report-on-fatalerror index.js~
to get a JSON summary on native stack traces, heap statistics,
resource usage, etc.

Node.js got a bunch of diagnostic utilities in the recent versions to
aid the investigation on errors and bottlenecks that are difficult to
pinpoint. If you want to create runtime statistics of the heap usage
you can do that by calling v8.getHeapSnapshot() that was added in
v11.13.0.

{{{heading(Worker threads in Node 12)}}}

The ~worker_threads~ module got into Node.js in v10.5.0.  It’s still
in experimental but a lot of effort has gone into its progress.
Node.js was designed single-threaded which fits I/O heavy use cases
well.  CPU heavy operations, however, increase execution time and lead
to slow performance.

Now, [[https://12factor.net][12factor]] says that these long-running operations should be
offloaded to individual processes. However, this might not be a valid
solution, when you need to expose the result of CPU heavy computations
such as data-mining and crypto over HTTP. Workers open the possibility
to utilize more threads at once to execute these actions parallel.

It’s not a stable solution though but it might be game-changing for
the Node.js community. Workers offer Node.js an opportunity to become
a player on the field of data science beside R, Scala, Python and
more.

* Node Version Manager---nvm
:PROPERTIES:
:appendix: t
:END:
- [[https://github.com/nvm-sh/nvm]]

“Node Version Manager - POSIX-compliant bash script to manage multiple
active node.js versions”

* V8 and NAN
:PROPERTIES:
:appendix: t
:END:

** About V8

*** Getting started with embedding V8
- https://v8.dev/docs/embed

*** V8 Documentation
- https://v8docs.nodesource.com

*** V8 Home
- https://v8.dev

** Node Addon Documentation
- https://nodejs.org/api/addons.html

** NAN
- https://github.com/nodejs/nan

* Chrome DevTools

Tools for Web Developers

- https://developers.google.com/web/tools/chrome-devtools

- https://youtu.be/VYyQv0CSZOE


#+cindex:DevTools
Chrome DevTools is a set of web developer tools built directly into
the Google Chrome browser.  DevTools can help you edit pages
on-the-fly and diagnose problems quickly, which ultimately helps you
build better websites, faster.

- Device Mode
- Elements panel
- Console panel
- Sources panel
- Network panel
- Performance panel
- Memory panel
- Application panel
- Security panel

** Getting Started
If you're a more experienced web developer, here are the recommended
starting points for learning how DevTools can improve your
productivity:

- View and Change the DOM
  - https://developers.google.com/web/tools/chrome-devtools/dom/

 - View and Change a Page's Styles (CSS)
   - https://developers.google.com/web/tools/chrome-devtools/css/

- Debug JavaScript
  - https://developers.google.com/web/tools/chrome-devtools/javascript/

- View Messages and Run JavaScript in the Console
  - https://developers.google.com/web/tools/chrome-devtools/console

- Optimize Website Speed
  - https://developers.google.com/web/tools/chrome-devtools/speed/get-started

- Inspect Network Activity
  - https://developers.google.com/web/tools/chrome-devtools/network/

** Console

*** Overview
- https://developers.google.com/web/tools/chrome-devtools/console


This page explains how the Chrome DevTools Console makes it easier to
develop web pages. The Console has 2 main uses: viewing logged
messages and running JavaScript.

*** Reference
- https://developers.google.com/web/tools/chrome-devtools/console/reference


This page is a reference of features related to the Chrome DevTools
Console.

*** API Reference
- https://developers.google.com/web/tools/chrome-devtools/console/api

**** Assert

**** Clear

**** Count

***** countReset

**** Debug

**** Dir

***** dirXML

**** Error

**** Group

***** groupCollapsed

**** Info

**** Log

**** Table

**** Time

***** timeEnd

**** Trace

**** Warn

** Utilities
- https://developers.google.com/web/tools/chrome-devtools/console/utilities

* Concept Index
:PROPERTIES:
:unnumbered: t
:index:    cp
:END:
* Macro Definitions                                                :noexport:
#+macro:heading @@texinfo:@heading @@$1
#+macro:subheading @@texinfo:@subheading @@$1
* Local Variables                                                  :noexport:

* Footnotes

[fn:1] https://tools.ietf.org/html/rfc4122A 

   Universally Unique IDentifier (UUID) URN Namespace.  A UUID is 128
   bits long, and can guarantee uniqueness across space and time.
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+date:%4:y-%02m-%02d %02H:%02M$"
# eval: (electric-quote-local-mode)
# eval: (org-indent-mode)
# End:
